{"version":3,"sources":["Componnets/SearchBar.jsx","App.js","reportWebVitals.js","index.js"],"names":["SearchBar","props","changeHandler","e","setState","searchBarInput","target","value","state","className","onChange","this","type","name","id","placeholder","onClick","getVenues","bind","Component","App","getLocation","navigator","geolocation","getCurrentPosition","res","coordinates","coords","latitude","longitude","query","params","client_id","client_secret","ll","v","radius","limit","axios","get","URLSearchParams","then","venues","data","response","groups","items","map","venue","location","address","city","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"mQAIqBA,E,kDACjB,WAAaC,GAAS,IAAD,8BACjB,cAAOA,IAMXC,cAAgB,SAAEC,GACd,EAAKC,SAAS,CACVC,eAAgBF,EAAEG,OAAOC,SAP7B,EAAKC,MAAQ,CACXH,eAAgB,IAHD,E,0CAarB,WACI,OACI,gCACI,2DACA,sBAAKI,UAAU,SAAf,UACI,uBACIC,SAAWC,KAAKT,cAChBU,KAAK,OACLC,KAAK,YACLC,GAAG,YACHC,YAAY,sBAExB,wBAAQC,QAAUL,KAAKV,MAAMgB,UAAUC,KAAK,KAAMP,KAAKH,MAAMH,gBAA7D,8B,GA1B2Bc,aCuExBC,E,kDArEb,WAAYnB,GAAQ,IAAD,8BACjB,cAAMA,IAWRoB,YAAc,WACZC,UAAUC,YAAYC,oBAAmB,SAACC,GACxC,EAAKrB,SACH,CACEsB,YAAaD,EAAIE,OAAOC,SAAW,IAAMH,EAAIE,OAAOE,YAEtD,WACE,EAAKZ,UAAU,mBAnBJ,EAyBnBA,UAAY,SAACa,GACX,IACMC,EAAS,CACbC,UAAW,mDACXC,cAAe,mDACfC,GAAI,EAAK1B,MAAMkB,YACfI,MAAOA,EACPK,EAAG,WACHC,OAAQ,IACRC,MAAO,IAETC,IAAMC,IAVW,gDAUI,IAAIC,gBAAgBT,IAASU,MAAK,SAAChB,GACtD,EAAKrB,SAAS,CACZsC,OAAQjB,EAAIkB,KAAKC,SAASC,OAAO,GAAGC,YApCxC,EAAKtC,MAAQ,CACXkB,YAAa,GACbgB,OAAQ,IAJO,E,qDAQnB,WACE/B,KAAKU,gB,oBAiCP,WACE,OACE,sBAAKZ,UAAU,MAAf,UACE,cAAC,EAAD,CAAWQ,UAAWN,KAAKM,YAC3B,qBAAKR,UAAU,cAAf,SACE,oBAAIA,UAAU,QAAd,SACGE,KAAKH,MAAMkC,OAAOK,KAAI,SAACC,GACtB,OACE,qBAAIvC,UAAU,QAAd,UACG,IACD,oBAAIA,UAAU,aAAd,SAA4BuC,EAAMA,MAAMnC,OACxC,0CACW,IACRmC,EAAMA,MAAMC,SAASC,QAClBF,EAAMA,MAAMC,SAASC,QACrB,YAJN,KAKKF,EAAMA,MAAMC,SAASE,UARDH,EAAMA,MAAMnC,oB,GAnDrCM,aCOHiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.b09020dd.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\n\r\n\r\n\r\nexport default class SearchBar extends Component {\r\n    constructor( props ) {\r\n        super( props )\r\n        this.state = {\r\n          searchBarInput: ''\r\n       \r\n        }\r\n    }\r\n    changeHandler = ( e ) => {\r\n        this.setState({ \r\n            searchBarInput: e.target.value \r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>What are you looking for?</h2>\r\n                <div className='search'>\r\n                    <input \r\n                        onChange={ this.changeHandler } \r\n                        type=\"text\" \r\n                        name='searchbar' \r\n                        id='searchbar' \r\n                        placeholder='Search Venue Type' \r\n                    />\r\n            <button onClick={ this.props.getVenues.bind(null, this.state.searchBarInput) }>Submit</button>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import \"./App.css\";\nimport axios from \"axios\";\nimport React, { Component } from \"react\";\nimport SearchBar from \"./Componnets/SearchBar\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      coordinates: \"\",\n      venues: [],\n    };\n  }\n\n  componentDidMount() {\n    this.getLocation();\n  }\n\n  getLocation = () => {\n    navigator.geolocation.getCurrentPosition((res) => {\n      this.setState(\n        {\n          coordinates: res.coords.latitude + \",\" + res.coords.longitude,\n        },\n        () => {\n          this.getVenues(\"trending\");\n        }\n      );\n    });\n  };\n\n  getVenues = (query) => {\n    const endPoint = \"https://api.foursquare.com/v2/venues/explore?\";\n    const params = {\n      client_id: \"A3RYORZCXNMS335R11BKSWAD2PJUFBU2BHL3KVG0KYHLCCDB\",\n      client_secret: \"W4JIPMABFIUKOLDENWGTNHZUCFUGGH1XQS3E2QVH2IOIXCTU\",\n      ll: this.state.coordinates,\n      query: query,\n      v: \"20180323\",\n      radius: 10000,\n      limit: 10,\n    };\n    axios.get(endPoint + new URLSearchParams(params)).then((res) => {\n      this.setState({\n        venues: res.data.response.groups[0].items,\n      });\n    });\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <SearchBar getVenues={this.getVenues} />\n        <div className=\"resultsComp\">\n          <ul className=\"ulApp\">\n            {this.state.venues.map((venue) => {\n              return (\n                <ul className=\"liApp\" key={venue.venue.name}>\n                  {\" \"}\n                  <li className=\"venue-name\">{venue.venue.name}</li>\n                  <li>\n                    Address:{\" \"}\n                    {venue.venue.location.address\n                      ? venue.venue.location.address\n                      : \"not found\"}\n                    , {venue.venue.location.city}\n                  </li>\n                </ul>\n              );\n            })}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}